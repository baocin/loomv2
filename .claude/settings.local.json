{
  "permissions": {
    "allow": [
      "Bash(grep:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(rg:*)",
      "Bash(mkdir:*)",
      "Bash(curl:*)",
      "Bash(uv pip install:*)",
      "Bash(uv venv:*)",
      "Bash(source:*)",
      "Bash(make:*)",
      "Bash(docker exec:*)",
      "Bash(docker-compose:*)",
      "Bash(docker compose:*)",
      "Bash(chmod:*)",
      "Bash(docker logs:*)",
      "Bash(docker stop:*)",
      "Bash(docker cp:*)",
      "Bash(docker restart:*)",
      "Bash(ls:*)",
      "Bash(docker build:*)",
      "Bash(docker volume:*)",
      "Bash(docker run:*)",
      "Bash(--network loomv2_default )",
      "Bash(-e KAFKA_BOOTSTRAP_SERVERS=kafka:29092 )",
      "Bash(-e KAFKA_TOPIC_PREFIX=\"\" )",
      "Bash(-e LOOM_KAFKA_INPUT_TOPIC=external.twitter.liked.raw )",
      "Bash(-e LOOM_KAFKA_OUTPUT_TOPIC=task.url.processed.twitter_archived )",
      "Bash(-e LOOM_LOG_LEVEL=INFO )",
      "Bash(-e TZ=UTC )",
      "Bash(-v ~/.loom/twitter_images:/app/screenshots )",
      "Bash(-v ~/.loom/logs/x-url-processor:/app/logs )",
      "Bash(loomv2-x-url-processor-ocr:*)",
      "Bash(docker rm:*)",
      "Bash(--network loomv2_default )",
      "Bash(-p 8009:8001 )",
      "Bash(-e LOOM_KAFKA_BOOTSTRAP_SERVERS=kafka:29092 )",
      "Bash(-e LOOM_DATABASE_URL=postgresql://loom:loom@postgres:5432/loom )",
      "Bash(-e LOOM_LOG_LEVEL=INFO )",
      "Bash(-e CONSUMER_TYPE=generic )",
      "Bash(-e KAFKA_GROUP_ID=generic-kafka-to-db-consumer )",
      "Bash(loomv2-generic-kafka-to-db-consumer:*)",
      "Bash(find:*)",
      "Bash(python -m pytest tests/test_mapping_engine.py -v)",
      "Bash(python3 -m pytest tests/test_mapping_engine.py -v)",
      "Bash(python3 -m pytest tests/test_mapping_engine.py::TestMappingEngine::test_engine_initialization -v)",
      "WebFetch(domain:ollama.com)",
      "WebFetch(domain:huggingface.co)",
      "Bash(python -m pytest --version)",
      "Bash(python3:*)",
      "Bash(pip install:*)",
      "Bash(docker:*)",
      "WebFetch(domain:github.com)",
      "Bash(mv:*)",
      "Bash(find:*)",
      "Bash(cp:*)",
      "Bash(python3 -m pytest tests/test_smoke.py -v)",
      "Bash(PYTHONPATH=/home/aoi/code/loomv2/services/email-fetcher python3 -m pytest tests/test_smoke.py -v)",
      "Bash(PYTHONPATH=/home/aoi/code/loomv2/services/email-fetcher python3 -m pytest tests/test_smoke.py::TestEmailFetcherSmoke::test_deduplication_by_content_hash -v)",
      "Bash(python -m pytest tests/unit/test_hackernews_hasher.py -v)",
      "Bash(python3 -m pytest tests/unit/test_hackernews_hasher.py -v)",
      "Bash(npm install)",
      "Bash(npm run build:*)",
      "Bash(true)",
      "Bash(pre-commit run:*)",
      "Bash(flutter pub:*)",
      "Bash(flutter build:*)",
      "Bash(bun add:*)",
      "Bash(kubectl get pods:*)",
      "Bash(kubectl config:*)",
      "Bash(for:*)",
      "Bash(do)",
      "Bash(sed:*)",
      "Bash(done)",
      "Bash(/home/aoi/code/loomv2/scripts/delete_all_consumer_groups.sh:*)",
      "Bash(./scripts/restart-consumers.sh:*)",
      "Bash(k3d kubeconfig:*)",
      "Bash(./scripts/reset-key-consumers.sh:*)",
      "Bash(export PGPASSWORD=loom)",
      "Bash(psql:*)",
      "Bash(PGPASSWORD=loom psql -h localhost -U loom -d loom -c \"SELECT table_name, COUNT(*) as count FROM information_schema.tables t LEFT JOIN LATERAL (SELECT COUNT(*) FROM t.table_schema || '.' || t.table_name) c ON true WHERE table_schema = 'public' AND table_type = 'BASE TABLE' AND table_name LIKE '%raw%' OR table_name LIKE '%embeddings%' OR table_name LIKE '%extraction%' GROUP BY table_name ORDER BY count DESC LIMIT 20;\")",
      "Bash(PGPASSWORD=loom psql -h localhost -U loom -d loom -t -c \"\nSELECT 'device_audio_raw', COUNT(*) FROM device_audio_raw UNION ALL\nSELECT 'device_sensor_gps_raw', COUNT(*) FROM device_sensor_gps_raw UNION ALL\nSELECT 'device_sensor_accelerometer_raw', COUNT(*) FROM device_sensor_accelerometer_raw UNION ALL\nSELECT 'device_health_heartrate_raw', COUNT(*) FROM device_health_heartrate_raw UNION ALL\nSELECT 'device_state_power_raw', COUNT(*) FROM device_state_power_raw UNION ALL\nSELECT 'device_image_camera_raw', COUNT(*) FROM device_image_camera_raw UNION ALL\nSELECT 'twitter_likes_with_embeddings', COUNT(*) FROM twitter_likes_with_embeddings UNION ALL\nSELECT 'emails_with_embeddings', COUNT(*) FROM emails_with_embeddings UNION ALL\nSELECT 'os_events_system_raw', COUNT(*) FROM os_events_system_raw UNION ALL\nSELECT 'os_events_app_lifecycle_raw', COUNT(*) FROM os_events_app_lifecycle_raw\nORDER BY 2 DESC;\")",
      "Bash(PGPASSWORD=loom psql -h localhost -U loom -d loom -t -c \"\nSELECT ''device_audio_raw'', COUNT(*) FROM device_audio_raw UNION ALL\nSELECT ''device_sensor_gps_raw'', COUNT(*) FROM device_sensor_gps_raw UNION ALL\nSELECT ''device_sensor_accelerometer_raw'', COUNT(*) FROM device_sensor_accelerometer_raw UNION ALL\nSELECT ''device_health_heartrate_raw'', COUNT(*) FROM device_health_heartrate_raw UNION ALL\nSELECT ''device_state_power_raw'', COUNT(*) FROM device_state_power_raw UNION ALL\nSELECT ''device_image_camera_raw'', COUNT(*) FROM device_image_camera_raw UNION ALL\nSELECT ''external_twitter_liked_raw'', COUNT(*) FROM external_twitter_liked_raw UNION ALL\nSELECT ''os_events_system_raw'', COUNT(*) FROM os_events_system_raw UNION ALL\nSELECT ''os_events_app_lifecycle_raw'', COUNT(*) FROM os_events_app_lifecycle_raw\nORDER BY 2 DESC;\")",
      "Bash(PGPASSWORD=loom psql -h localhost -U loom -d loom -t -c \"\nSELECT ''device_audio_raw'', COUNT(*) FROM device_audio_raw UNION ALL\nSELECT ''device_sensor_gps_raw'', COUNT(*) FROM device_sensor_gps_raw UNION ALL\nSELECT ''device_sensor_accelerometer_raw'', COUNT(*) FROM device_sensor_accelerometer_raw UNION ALL\nSELECT ''device_health_heartrate_raw'', COUNT(*) FROM device_health_heartrate_raw UNION ALL\nSELECT ''device_state_power_raw'', COUNT(*) FROM device_state_power_raw UNION ALL\nSELECT ''device_image_camera_raw'', COUNT(*) FROM device_image_camera_raw UNION ALL\nSELECT ''external_twitter_liked_raw'', COUNT(*) FROM external_twitter_liked_raw UNION ALL\nSELECT ''os_events_system_raw'', COUNT(*) FROM os_events_system_raw UNION ALL\nSELECT ''os_events_app_lifecycle_raw'', COUNT(*) FROM os_events_app_lifecycle_raw\nORDER BY 2 DESC;\")",
      "Bash(k3d cluster:*)",
      "Bash(kafka-consumer-groups.sh:*)",
      "Bash(python:*)",
      "Bash(kubectl get:*)"
    ]
  },
  "enableAllProjectMcpServers": false
}
